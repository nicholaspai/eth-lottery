'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ZosNetworkFile = require('./ZosNetworkFile');

var _ZosNetworkFile2 = _interopRequireDefault(_ZosNetworkFile);

var _zosLib = require('zos-lib');

var _Dependency = require('../dependency/Dependency');

var _Dependency2 = _interopRequireDefault(_Dependency);

var _ZosVersion = require('./ZosVersion');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = new _zosLib.Logger('ZosPackageFile');

class ZosPackageFile {

  constructor(fileName = 'zos.json') {
    this.fileName = fileName;
    this.data = _zosLib.FileSystem.parseJsonIfExists(this.fileName) || { zosversion: _ZosVersion.ZOS_VERSION };
    (0, _ZosVersion.checkVersion)(this.data.zosversion, this.fileName);
  }

  exists() {
    return _zosLib.FileSystem.exists(this.fileName);
  }

  get lib() {
    return this.data.lib;
  }

  get name() {
    return this.data.name;
  }

  get version() {
    return this.data.version;
  }

  get dependencies() {
    return this.data.dependencies || {};
  }

  get dependenciesNames() {
    return Object.keys(this.dependencies);
  }

  getDependencyVersion(name) {
    return this.dependencies[name];
  }

  hasDependency(name) {
    return !!this.dependencies[name];
  }

  hasDependencies() {
    return !_lodash2.default.isEmpty(this.dependencies);
  }

  get contracts() {
    return this.data.contracts || {};
  }

  get contractAliases() {
    return Object.keys(this.contracts);
  }

  get contractNames() {
    return Object.values(this.contracts);
  }

  get isLib() {
    return !!this.lib;
  }

  get isLightweight() {
    return !this.data.publish && !this.isLib;
  }

  contract(alias) {
    return this.contracts[alias];
  }

  hasName(name) {
    return this.name === name;
  }

  dependencyMatches(name, version) {
    return this.hasDependency(name) && _Dependency2.default.satisfiesVersion(version, this.getDependencyVersion(name));
  }

  isCurrentVersion(version) {
    return this.version === version;
  }

  hasContract(alias) {
    return !!this.contract(alias);
  }

  hasContracts() {
    return !_lodash2.default.isEmpty(this.contracts);
  }

  set lib(lib) {
    this.data.lib = lib;
  }

  set publish(publish) {
    this.data.publish = !!publish;
  }

  set name(name) {
    this.data.name = name;
  }

  set version(version) {
    this.data.version = version;
  }

  set contracts(contracts) {
    this.data.contracts = contracts;
  }

  setDependency(name, version) {
    if (!this.data.dependencies) this.data.dependencies = {};
    this.data.dependencies[name] = version;
  }

  unsetDependency(name) {
    if (!this.data.dependencies) return;
    delete this.data.dependencies[name];
  }

  addContract(alias, name = undefined) {
    this.data.contracts[alias] = name || alias;
  }

  unsetContract(alias) {
    delete this.data.contracts[alias];
  }

  networkFile(network) {
    const networkFileName = this.fileName.replace(/\.json\s*$/, `.${network}.json`);
    if (networkFileName === this.fileName) throw Error(`Cannot create network file name from ${this.fileName}`);
    return new _ZosNetworkFile2.default(this, network, networkFileName);
  }

  write() {
    _zosLib.FileSystem.writeJson(this.fileName, this.data);
    log.info(`Successfully written ${this.fileName}`);
  }
}
exports.default = ZosPackageFile;